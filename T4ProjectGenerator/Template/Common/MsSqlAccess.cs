// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 12.0.0.0
//  
//     对此文件的更改可能会导致不正确的行为。此外，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace T4ProjectGenerator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\zy\T4\T4\T4ProjectGenerator\T4ProjectGenerator\Template\Common\MsSqlAccess.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class MsSqlAccess : Base
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("using Dapper;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Dat" +
                    "a;\r\n\r\nnamespace ");
            
            #line 11 "E:\zy\T4\T4\T4ProjectGenerator\T4ProjectGenerator\Template\Common\MsSqlAccess.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Config.CommonNamespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    /// <summary>\r\n    /// sql语句\r\n    /// </summary>\r\n    public interface I" +
                    "SqlConfig\r\n    {\r\n        /// <summary>\r\n        /// table \r\n        /// </summa" +
                    "ry>\r\n        string TableName { get; }\r\n\r\n        /// <summary>\r\n        /// ins" +
                    "ert into table ({0}) values ({1}) \r\n        /// </summary>\r\n        string Inser" +
                    "t { get; }\r\n\r\n        /// <summary>\r\n        /// insert into table ({0}) values " +
                    "({1}); select scope_identity()\r\n        /// </summary>\r\n        string InsertIde" +
                    "ntity { get; }\r\n\r\n        /// <summary>\r\n        /// update table set {0} where " +
                    "{1}\r\n        /// </summary>\r\n        string Update { get; }\r\n\r\n        /// <summ" +
                    "ary>\r\n        /// delete from table where {0}\r\n        /// </summary>\r\n        s" +
                    "tring Delete { get; }\r\n\r\n        /// <summary>\r\n        /// select count(*) from" +
                    " table \r\n        /// </summary>\r\n        string SelectAllCount { get; }\r\n\r\n     " +
                    "   /// <summary>\r\n        /// select count(*) from table where {0} \r\n        ///" +
                    " </summary>\r\n        string SelectCount { get; }\r\n\r\n        /// <summary>\r\n     " +
                    "   /// select top({0}) * from table where {1}\r\n        /// </summary>\r\n        s" +
                    "tring SelectTop { get; }\r\n\r\n        /// <summary>\r\n        /// select top({0}) *" +
                    " from table where {1} order by {2}\r\n        /// </summary>\r\n        string Selec" +
                    "tTopOrder { get; }\r\n\r\n        /// <summary>\r\n        /// select * from table \r\n " +
                    "       /// </summary>\r\n        string SelectAll { get; }\r\n\r\n        /// <summary" +
                    ">\r\n        /// select * from table where {0} \r\n        /// </summary>\r\n        s" +
                    "tring SelectWhere { get; }\r\n\r\n        /// <summary>\r\n        /// select * from t" +
                    "able where {0} order by {1} \r\n        /// </summary>\r\n        string SelectWhere" +
                    "Order { get; }\r\n\r\n        /// <summary>\r\n        /// select * from (select row_n" +
                    "umber() over (order by {1}) as RowIndex, * from table where {0}) as t where t.Ro" +
                    "wIndex between {2} and {3} \r\n        /// </summary>\r\n        string SelectPage {" +
                    " get; }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 数据库访问组件\r\n    /// </summary>\r\n    pu" +
                    "blic interface IDbContextComponent : IDisposable\r\n    {\r\n        /// <summary>\r\n" +
                    "        /// 数据库连接\r\n        /// </summary>\r\n        IDbConnection Connection { ge" +
                    "t; set; }\r\n        /// <summary>\r\n        /// 数据库事务\r\n        /// </summary>\r\n   " +
                    "     IDbTransaction Transaction { get; set; }\r\n    }\r\n\r\n    /// <summary>\r\n    /" +
                    "// 事务处理组件\r\n    /// </summary>\r\n    public interface IDbTransactionAccess : IDisp" +
                    "osable\r\n    {\r\n        /// <summary>\r\n        /// 开启状态\r\n        /// </summary>\r\n" +
                    "        bool IsBeginTrans { get; set; }\r\n\r\n        /// <summary>\r\n        /// 开启" +
                    "\r\n        /// </summary>\r\n        void BeginTrans();\r\n\r\n        /// <summary>\r\n " +
                    "       /// 提交\r\n        /// </summary>\r\n        void Commit();\r\n\r\n        /// <su" +
                    "mmary>\r\n        /// 回滚\r\n        /// </summary>\r\n        void Rollback();\r\n    }\r" +
                    "\n\r\n    /// <summary>\r\n    /// 数据库访问接口\r\n    /// </summary>\r\n    public interface " +
                    "IDbAccess\r\n    {\r\n        /// <summary>\r\n        /// 添加或批量添加\r\n        /// </summ" +
                    "ary>\r\n        int Add<TEntity>(params TEntity[] entities) where TEntity : class;" +
                    "\r\n\r\n        /// <summary>\r\n        /// 单个添加\r\n        /// </summary>\r\n        TId" +
                    "entity Add<TEntity, TIdentity>(TEntity entity)\r\n            where TEntity : clas" +
                    "s\r\n            where TIdentity : IConvertible;\r\n\r\n        /// <summary>\r\n       " +
                    " /// 修改\r\n        /// </summary>\r\n        int Update<TEntity>(TEntity entity) whe" +
                    "re TEntity : class;\r\n\r\n        /// <summary>\r\n        /// 删除\r\n        /// </summ" +
                    "ary>\r\n        int Delete(Expr expr);\r\n\r\n        /// <summary>\r\n        /// 判断存在\r" +
                    "\n        /// </summary>\r\n        bool IsExist(Expr expr);\r\n\r\n        /// <summar" +
                    "y>\r\n        /// 总数量\r\n        /// </summary>\r\n        int GetCount();\r\n\r\n        " +
                    "/// <summary>\r\n        /// 查询条件数量\r\n        /// </summary>\r\n        int GetCount(" +
                    "Expr expr);\r\n\r\n        /// <summary>\r\n        /// 查询实体\r\n        /// </summary>\r\n" +
                    "        TEntity Get<TEntity>(Expr expr) where TEntity : class;\r\n\r\n        /// <s" +
                    "ummary>\r\n        /// 查询实体\r\n        /// </summary>\r\n        TEntity Get<TEntity>(" +
                    "Expr expr, OrderByExpr orderBy) where TEntity : class;\r\n\r\n        /// <summary>\r" +
                    "\n        /// 查询列表\r\n        /// </summary>\r\n        IEnumerable<TEntity> GetList<" +
                    "TEntity>() where TEntity : class;\r\n\r\n        /// <summary>\r\n        /// 查询列表\r\n  " +
                    "      /// </summary>\r\n        IEnumerable<TEntity> GetList<TEntity>(Expr expr) w" +
                    "here TEntity : class;\r\n\r\n        /// <summary>\r\n        /// 查询列表\r\n        /// </" +
                    "summary>\r\n        IEnumerable<TEntity> GetList<TEntity>(Expr expr, int top) wher" +
                    "e TEntity : class;\r\n\r\n        /// <summary>\r\n        /// 查询列表\r\n        /// </sum" +
                    "mary>\r\n        IEnumerable<TEntity> GetList<TEntity>(Expr expr, int top, OrderBy" +
                    "Expr orderBy) where TEntity : class;\r\n\r\n        /// <summary>\r\n        /// 查询列表\r" +
                    "\n        /// </summary>\r\n        IEnumerable<TEntity> GetList<TEntity>(Expr expr" +
                    ", OrderByExpr orderBy) where TEntity : class;\r\n\r\n        /// <summary>\r\n        " +
                    "/// 查询列表\r\n        /// </summary>\r\n        IEnumerable<TEntity> GetList<TEntity>(" +
                    "Expr expr, OrderByExpr orderBy, int startPage, int endPage) where TEntity : clas" +
                    "s;\r\n    }\r\n\r\n    /// <summary>\r\n    /// 数据库访问的抽象类。\r\n    /// 此类提供对数据库读写的基础函数。\r\n  " +
                    "  /// </summary>\r\n    public class MsSqlAccessBase : IDbAccess\r\n    {\r\n        p" +
                    "rotected IDbConnection Connection { get; set; }\r\n        protected IDbTransactio" +
                    "n Transaction { get; set; }\r\n        protected ISqlConfig Config { get; set; }\r\n" +
                    "\r\n        public MsSqlAccessBase() { }\r\n\r\n        /// <summary>\r\n        /// 添加或" +
                    "批量添加\r\n        /// </summary>\r\n        public int Add<TEntity>(params TEntity[] e" +
                    "ntities) where TEntity : class\r\n        {\r\n            return this.Connection.Ex" +
                    "ecute(this.Config.Insert, entities, this.Transaction);\r\n        }\r\n\r\n        ///" +
                    " <summary>\r\n        /// 单个添加\r\n        /// </summary>\r\n        public TIdentity A" +
                    "dd<TEntity, TIdentity>(TEntity entity)\r\n            where TEntity : class\r\n     " +
                    "       where TIdentity : IConvertible\r\n        {\r\n            return this.Connec" +
                    "tion.ExecuteScalar<TIdentity>(this.Config.InsertIdentity, entity, this.Transacti" +
                    "on);\r\n        }\r\n\r\n        /// <summary>\r\n        /// 修改\r\n        /// </summary>" +
                    "\r\n        public int Update<TEntity>(TEntity entity) where TEntity : class\r\n    " +
                    "    {\r\n            return this.Connection.Execute(this.Config.Update, entity, th" +
                    "is.Transaction);\r\n        }\r\n\r\n        /// <summary>\r\n        /// 删除\r\n        //" +
                    "/ </summary>\r\n        public int Delete(Expr expr)\r\n        {\r\n            Dynam" +
                    "icParameters parameters = new DynamicParameters();\r\n            string deleteStr" +
                    "ing = string.Format(this.Config.Delete, expr.ToWhere(parameters));\r\n            " +
                    "return this.Connection.Execute(deleteString, parameters, this.Transaction);\r\n   " +
                    "     }\r\n\r\n        /// <summary>\r\n        /// 判断存在\r\n        /// </summary>\r\n     " +
                    "   public bool IsExist(Expr expr)\r\n        {\r\n            DynamicParameters para" +
                    "meters = new DynamicParameters();\r\n            string selectString = string.Form" +
                    "at(this.Config.SelectCount, expr.ToWhere(parameters));\r\n            int result =" +
                    " this.Connection.ExecuteScalar<int>(selectString, parameters, this.Transaction);" +
                    "\r\n            return result > 0;\r\n        }\r\n\r\n        /// <summary>\r\n        //" +
                    "/ 总数量\r\n        /// </summary>\r\n        public int GetCount()\r\n        {\r\n       " +
                    "     DynamicParameters parameters = new DynamicParameters();\r\n            return" +
                    " this.Connection.ExecuteScalar<int>(this.Config.SelectAllCount, transaction: thi" +
                    "s.Transaction);\r\n        }\r\n\r\n        /// <summary>\r\n        /// 查询条件数量\r\n       " +
                    " /// </summary>\r\n        public int GetCount(Expr expr)\r\n        {\r\n            " +
                    "DynamicParameters parameters = new DynamicParameters();\r\n            string sele" +
                    "ctString = string.Format(this.Config.SelectCount, expr.ToWhere(parameters));\r\n  " +
                    "          return this.Connection.ExecuteScalar<int>(selectString, parameters, th" +
                    "is.Transaction);\r\n        }\r\n\r\n        /// <summary>\r\n        /// 查询实体\r\n        " +
                    "/// </summary>\r\n        public TEntity Get<TEntity>(Expr expr) where TEntity : c" +
                    "lass\r\n        {\r\n            DynamicParameters parameters = new DynamicParameter" +
                    "s();\r\n            string selectString = string.Format(this.Config.SelectTop, 1, " +
                    "expr.ToWhere(parameters));\r\n            return this.Connection.QueryFirstOrDefau" +
                    "lt<TEntity>(selectString, parameters, this.Transaction);\r\n        }\r\n\r\n        /" +
                    "// <summary>\r\n        /// 查询实体\r\n        /// </summary>\r\n        public TEntity G" +
                    "et<TEntity>(Expr expr, OrderByExpr orderBy) where TEntity : class\r\n        {\r\n  " +
                    "          DynamicParameters parameters = new DynamicParameters();\r\n            s" +
                    "tring selectString = string.Format(this.Config.SelectTopOrder, 1, expr.ToWhere(p" +
                    "arameters), orderBy.ToOrderBy());\r\n            return this.Connection.QueryFirst" +
                    "OrDefault<TEntity>(selectString, parameters, this.Transaction);\r\n        }\r\n\r\n  " +
                    "      /// <summary>\r\n        /// 查询列表\r\n        /// </summary>\r\n        public IE" +
                    "numerable<TEntity> GetList<TEntity>() where TEntity : class\r\n        {\r\n        " +
                    "    return this.Connection.Query<TEntity>(this.Config.SelectAll, transaction: th" +
                    "is.Transaction);\r\n        }\r\n\r\n        /// <summary>\r\n        /// 查询列表\r\n        " +
                    "/// </summary>\r\n        public IEnumerable<TEntity> GetList<TEntity>(Expr expr) " +
                    "where TEntity : class\r\n        {\r\n            DynamicParameters parameters = new" +
                    " DynamicParameters();\r\n            string selectString = string.Format(this.Conf" +
                    "ig.SelectWhere, expr.ToWhere(parameters), 1);\r\n            return this.Connectio" +
                    "n.Query<TEntity>(selectString, parameters, this.Transaction);\r\n        }\r\n\r\n    " +
                    "    /// <summary>\r\n        /// 查询列表\r\n        /// </summary>\r\n        public IEnu" +
                    "merable<TEntity> GetList<TEntity>(Expr expr, int top) where TEntity : class\r\n   " +
                    "     {\r\n            DynamicParameters parameters = new DynamicParameters();\r\n   " +
                    "         string selectString = string.Format(this.Config.SelectTop, top, expr.To" +
                    "Where(parameters));\r\n            return this.Connection.Query<TEntity>(selectStr" +
                    "ing, parameters, this.Transaction);\r\n        }\r\n\r\n        /// <summary>\r\n       " +
                    " /// 查询列表\r\n        /// </summary>\r\n        public IEnumerable<TEntity> GetList<T" +
                    "Entity>(Expr expr, int top, OrderByExpr orderBy) where TEntity : class\r\n        " +
                    "{\r\n            DynamicParameters parameters = new DynamicParameters();\r\n        " +
                    "    string selectString = string.Format(this.Config.SelectTopOrder, top, expr.To" +
                    "Where(parameters), orderBy.ToOrderBy());\r\n            return this.Connection.Que" +
                    "ry<TEntity>(selectString, parameters, this.Transaction);\r\n        }\r\n\r\n        /" +
                    "// <summary>\r\n        /// 查询列表\r\n        /// </summary>\r\n        public IEnumerab" +
                    "le<TEntity> GetList<TEntity>(Expr expr, OrderByExpr orderBy) where TEntity : cla" +
                    "ss\r\n        {\r\n            DynamicParameters parameters = new DynamicParameters(" +
                    ");\r\n            string selectString = string.Format(this.Config.SelectWhereOrder" +
                    ", expr.ToWhere(parameters), orderBy.ToOrderBy());\r\n            return this.Conne" +
                    "ction.Query<TEntity>(selectString, parameters, this.Transaction);\r\n        }\r\n\r\n" +
                    "        /// <summary>\r\n        /// 查询列表\r\n        /// </summary>\r\n        public " +
                    "IEnumerable<TEntity> GetList<TEntity>(Expr expr, OrderByExpr orderBy, int startP" +
                    "age, int endPage) where TEntity : class\r\n        {\r\n            DynamicParameter" +
                    "s parameters = new DynamicParameters();\r\n            string selectString = strin" +
                    "g.Format(this.Config.SelectPage, expr.ToWhere(parameters), orderBy.ToOrderBy(), " +
                    "startPage, endPage);\r\n            return this.Connection.Query<TEntity>(selectSt" +
                    "ring, parameters, this.Transaction);\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n   " +
                    " /// 业务逻辑类提供对数据库读写的基础函数\r\n    /// </summary>\r\n    public class ServiceContextBase" +
                    " : IDbAccess\r\n    {\r\n        protected MsSqlAccessBase Manager { get; set; }\r\n\r\n" +
                    "        public ServiceContextBase() { }\r\n\r\n        public int Add<TEntity>(param" +
                    "s TEntity[] entities) where TEntity : class\r\n        {\r\n            if (entities" +
                    " == null || entities.Length <= 0)\r\n            {\r\n                throw new Argu" +
                    "mentNullException(\"entities\", \"添加实体集不能为空\");\r\n            }\r\n            return t" +
                    "his.Manager.Add<TEntity>(entities);\r\n        }\r\n\r\n        public TIdentity Add<T" +
                    "Entity, TIdentity>(TEntity entity)\r\n            where TEntity : class\r\n         " +
                    "   where TIdentity : IConvertible\r\n        {\r\n            if (entity == null)\r\n " +
                    "           {\r\n                throw new ArgumentNullException(\"entity\", \"添加实体不能为" +
                    "空\");\r\n            }\r\n            return this.Manager.Add<TEntity, TIdentity>(ent" +
                    "ity);\r\n        }\r\n\r\n        public int Update<TEntity>(TEntity entity) where TEn" +
                    "tity : class\r\n        {\r\n            if (entity == null)\r\n            {\r\n       " +
                    "         throw new ArgumentNullException(\"entity\", \"修改实体不能为空\");\r\n            }\r\n" +
                    "            return this.Manager.Update<TEntity>(entity);\r\n        }\r\n\r\n        p" +
                    "ublic int Delete(Expr expr)\r\n        {\r\n            return this.Manager.Delete(e" +
                    "xpr);\r\n        }\r\n\r\n        public bool IsExist(Expr expr)\r\n        {\r\n         " +
                    "   return this.Manager.IsExist(expr);\r\n        }\r\n\r\n        public int GetCount(" +
                    ")\r\n        {\r\n            return this.Manager.GetCount();\r\n        }\r\n\r\n        " +
                    "public int GetCount(Expr expr)\r\n        {\r\n            return this.Manager.GetCo" +
                    "unt(expr);\r\n        }\r\n\r\n        public TEntity Get<TEntity>(Expr expr) where TE" +
                    "ntity : class\r\n        {\r\n            return this.Manager.Get<TEntity>(expr);\r\n " +
                    "       }\r\n\r\n        public TEntity Get<TEntity>(Expr expr, OrderByExpr orderBy) " +
                    "where TEntity : class\r\n        {\r\n            return this.Manager.Get<TEntity>(e" +
                    "xpr, orderBy);\r\n        }\r\n\r\n        public IEnumerable<TEntity> GetList<TEntity" +
                    ">() where TEntity : class\r\n        {\r\n            return this.Manager.GetList<TE" +
                    "ntity>();\r\n        }\r\n\r\n        public IEnumerable<TEntity> GetList<TEntity>(Exp" +
                    "r expr) where TEntity : class\r\n        {\r\n            return this.Manager.GetLis" +
                    "t<TEntity>(expr);\r\n        }\r\n\r\n        public IEnumerable<TEntity> GetList<TEnt" +
                    "ity>(Expr expr, int top) where TEntity : class\r\n        {\r\n            return th" +
                    "is.Manager.GetList<TEntity>(expr, top);\r\n        }\r\n\r\n        public IEnumerable" +
                    "<TEntity> GetList<TEntity>(Expr expr, int top, OrderByExpr orderBy) where TEntit" +
                    "y : class\r\n        {\r\n            return this.Manager.GetList<TEntity>(expr, top" +
                    ", orderBy);\r\n        }\r\n\r\n        public IEnumerable<TEntity> GetList<TEntity>(E" +
                    "xpr expr, OrderByExpr orderBy) where TEntity : class\r\n        {\r\n            ret" +
                    "urn this.Manager.GetList<TEntity>(expr, orderBy);\r\n        }\r\n\r\n        public I" +
                    "Enumerable<TEntity> GetList<TEntity>(Expr expr, OrderByExpr orderBy, int startPa" +
                    "ge, int endPage) where TEntity : class\r\n        {\r\n            return this.Manag" +
                    "er.GetList<TEntity>(expr, orderBy, startPage, endPage);\r\n        }\r\n    }\r\n\r\n   " +
                    " /// <summary>\r\n    /// 业务逻辑类实现事务\r\n    /// </summary>\r\n    public abstract class" +
                    " DbProviderFactory : IDbTransactionAccess\r\n    {\r\n        public bool IsBeginTra" +
                    "ns { get; set; }\r\n\r\n        protected abstract IDbContextComponent Context { get" +
                    "; }\r\n\r\n        public DbProviderFactory()\r\n        {\r\n            this.IsBeginTr" +
                    "ans = false;\r\n        }\r\n\r\n        public void BeginTrans()\r\n        {\r\n        " +
                    "    if (this.IsBeginTrans == false)\r\n            {\r\n                this.Context" +
                    ".Transaction = this.Context.Connection.BeginTransaction();\r\n                this" +
                    ".IsBeginTrans = true;\r\n            }\r\n        }\r\n\r\n        public void Commit()\r" +
                    "\n        {\r\n            if (this.IsBeginTrans == false)\r\n            {\r\n        " +
                    "        throw new ArgumentNullException(\"Commit\", \"未开启事务不能进行操作\");\r\n            }" +
                    "\r\n            this.Context.Transaction.Commit();\r\n            this.IsBeginTrans " +
                    "= false;\r\n        }\r\n\r\n        public void Rollback()\r\n        {\r\n            if" +
                    " (this.IsBeginTrans == false)\r\n            {\r\n                throw new Argument" +
                    "NullException(\"Rollback\", \"未开启事务不能进行操作\");\r\n            }\r\n            this.Conte" +
                    "xt.Transaction.Rollback();\r\n            this.IsBeginTrans = false;\r\n        }\r\n\r" +
                    "\n        public void Dispose()\r\n        {\r\n            if (this.IsBeginTrans)\r\n " +
                    "           {\r\n                Rollback();\r\n            }\r\n            this.Conte" +
                    "xt.Dispose();\r\n        }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
