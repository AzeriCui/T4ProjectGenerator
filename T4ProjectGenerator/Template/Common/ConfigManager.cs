// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 12.0.0.0
//  
//     对此文件的更改可能会导致不正确的行为。此外，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace T4ProjectGenerator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\zy\T4\T4ProjectGenerator\T4ProjectGenerator\Template\Common\ConfigManager.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class ConfigManager : Base
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Configuration;\r\n\r\n" +
                    "namespace ");
            
            #line 10 "E:\zy\T4\T4ProjectGenerator\T4ProjectGenerator\Template\Common\ConfigManager.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Config.CommonNamespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public class ConfigManager\r\n    {\r\n        public static string GetValue" +
                    "(string key)\r\n        {\r\n            return GetValue<string>(key);\r\n        }\r\n\r" +
                    "\n        public static TSource GetValue<TSource>(string key)\r\n        {\r\n       " +
                    "     return GetValue(key, default(TSource), true);\r\n        }\r\n\r\n        public " +
                    "static string GetValue(string key, string defaultValue)\r\n        {\r\n            " +
                    "return GetValue<string>(key, defaultValue);\r\n        }\r\n\r\n        public static " +
                    "TSource GetValue<TSource>(string key, TSource defaultValue)\r\n        {\r\n        " +
                    "    return GetValue(key, defaultValue, false);\r\n        }\r\n\r\n        private sta" +
                    "tic TSource GetValue<TSource>(string key, TSource defaultValue, bool throwExcept" +
                    "ion)\r\n        {\r\n            var value = ConfigurationManager.AppSettings[key];\r" +
                    "\n            if (value == null)\r\n            {\r\n                if (throwExcepti" +
                    "on)\r\n                {\r\n                    throw new KeyNotFoundException(\"AppS" +
                    "ettings[\\\"\" + key + \"\\\"] not found\");\r\n                }\r\n                return" +
                    " defaultValue;\r\n            }\r\n            try\r\n            {\r\n                i" +
                    "f (typeof(Enum).IsAssignableFrom(typeof(TSource)))\r\n                {\r\n         " +
                    "           return (TSource)Enum.Parse(typeof(TSource), value);\r\n                " +
                    "}\r\n                return (TSource)Convert.ChangeType(value, typeof(TSource));\r\n" +
                    "            }\r\n            catch (Exception ex)\r\n            {\r\n                " +
                    "if (throwException)\r\n                {\r\n                    throw ex;\r\n         " +
                    "       }\r\n                return defaultValue;\r\n            }\r\n        }\r\n    }\r" +
                    "\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
