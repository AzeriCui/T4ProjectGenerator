<#@ template language="C#" inherits="Base" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using Dapper;
using System;
using System.Collections.Generic;
using System.Data;

namespace <#=        Config.CommonNamespace #>
{
    public abstract class MsSqlAccessBase
    {
        #region 数据属性
        protected IDbContextComponent Context { get; private set; }
        protected IDbConnection Connection { get; private set; }
        protected IDbTransaction Transaction { get; private set; }

        protected abstract string TableName { get; }
        protected abstract string InsertString { get; }
        protected abstract string UpdateString { get; }

        public MsSqlAccessBase(IDbContextComponent context)
        {
            this.Context = context;
            this.Connection = this.Context.Connection;
            this.Transaction = this.Context.Transaction;
        }

        #endregion

        #region 基础方法
        /// <summary>
        /// 添加或批量添加
        /// </summary>
        public virtual int Add<TEntity>(params TEntity[] entities)
            where TEntity : class
        {
            if (entities == null || entities.Length <= 0)
            {
                throw new ArgumentNullException("entities", "操作数据不能为空");
            }
            return this.Connection.Execute(this.InsertString, entities, this.Transaction);
        }

        /// <summary>
        /// 单个添加
        /// </summary>
        public virtual TIdentity Add<TEntity, TIdentity>(TEntity entity)
            where TEntity : class
            where TIdentity : IConvertible
        {
            if (entity == null)
            {
                throw new ArgumentNullException("entity", "操作数据不能为空");
            }
            string insertString = this.InsertString + "; SELECT SCOPE_IDENTITY()";
            return this.Connection.ExecuteScalar<TIdentity>(insertString, entity, this.Transaction);
        }

        /// <summary>
        /// 修改
        /// </summary>
        public virtual int Update<TEntity>(TEntity entity)
            where TEntity : class
        {
            if (entity == null)
            {
                throw new ArgumentNullException("entity", "操作数据不能为空");
            }
            return this.Connection.Execute(this.UpdateString, entity, this.Transaction);
        }

        /// <summary>
        /// 删除
        /// </summary>
        public virtual int Delete(Expr expr)
        {
            DynamicParameters parameters = new DynamicParameters();
            string deleteString = string.Format(MsSqlConfig.DELETE_FORMAT, this.TableName, expr.ToWhere(parameters));
            return this.Connection.Execute(deleteString, parameters, this.Transaction);
        }

        /// <summary>
        /// 判断存在
        /// </summary>
        public virtual bool IsExist(Expr expr)
        {
            DynamicParameters parameters = new DynamicParameters();
            string selectString = string.Format(MsSqlConfig.SELECT_COUNT_FORMAT, this.TableName, expr.ToWhere(parameters));
            int result = this.Connection.ExecuteScalar<int>(selectString, parameters, this.Transaction);
            return result > 0;
        }

        /// <summary>
        /// 总数量
        /// </summary>
        public virtual int GetCount()
        {
            DynamicParameters parameters = new DynamicParameters();
            string selectString = string.Format(MsSqlConfig.SELECT_ALL_COUNT_FORMAT, this.TableName);
            return this.Connection.ExecuteScalar<int>(selectString, transaction: this.Transaction);
        }

        /// <summary>
        /// 查询条件数量
        /// </summary>
        public virtual int GetCount(Expr expr)
        {
            DynamicParameters parameters = new DynamicParameters();
            string selectString = string.Format(MsSqlConfig.SELECT_COUNT_FORMAT, this.TableName, expr.ToWhere(parameters));
            return this.Connection.ExecuteScalar<int>(selectString, parameters, this.Transaction);
        }

        /// <summary>
        /// 查询实体
        /// </summary>
        public virtual TEntity Get<TEntity>(Expr expr)
            where TEntity : class
        {
            DynamicParameters parameters = new DynamicParameters();
            string selectString = string.Format(MsSqlConfig.SELECT_TOP_FORMAT, this.TableName, expr.ToWhere(parameters), 1);
            return this.Connection.QueryFirstOrDefault<TEntity>(selectString, parameters, this.Transaction);
        }

        /// <summary>
        /// 查询实体
        /// </summary>
        public virtual TEntity Get<TEntity>(Expr expr, OrderByExpr orderBy)
            where TEntity : class
        {
            DynamicParameters parameters = new DynamicParameters();
            string selectString = string.Format(MsSqlConfig.SELECT_TOP_ORDER_BY_FORMAT,
                this.TableName, expr.ToWhere(parameters), 1, orderBy.ToOrderBy());
            return this.Connection.QueryFirstOrDefault<TEntity>(selectString, parameters, this.Transaction);
        }

        /// <summary>
        /// 查询列表
        /// </summary>
        public virtual IEnumerable<TEntity> GetList<TEntity>()
            where TEntity : class
        {
            string selectString = string.Format(MsSqlConfig.SELECT_ALL_FORMAT, this.TableName);
            return this.Connection.Query<TEntity>(selectString, transaction: this.Transaction);
        }

        /// <summary>
        /// 查询列表
        /// </summary>
        public virtual IEnumerable<TEntity> GetList<TEntity>(Expr expr)
            where TEntity : class
        {
            DynamicParameters parameters = new DynamicParameters();
            string selectString = string.Format(MsSqlConfig.SELECT_FORMAT, this.TableName, expr.ToWhere(parameters), 1);
            return this.Connection.Query<TEntity>(selectString, parameters, this.Transaction);
        }

        /// <summary>
        /// 查询列表
        /// </summary>
        public virtual IEnumerable<TEntity> GetList<TEntity>(Expr expr, int top)
            where TEntity : class
        {
            DynamicParameters parameters = new DynamicParameters();
            string selectString = string.Format(MsSqlConfig.SELECT_TOP_FORMAT, this.TableName, expr.ToWhere(parameters), top);
            return this.Connection.Query<TEntity>(selectString, parameters, this.Transaction);
        }

        /// <summary>
        /// 查询列表
        /// </summary>
        public virtual IEnumerable<TEntity> GetList<TEntity>(Expr expr, int top, OrderByExpr orderBy)
            where TEntity : class
        {
            DynamicParameters parameters = new DynamicParameters();
            string selectString = string.Format(MsSqlConfig.SELECT_TOP_ORDER_BY_FORMAT,
                this.TableName, expr.ToWhere(parameters), top, orderBy.ToOrderBy());
            return this.Connection.Query<TEntity>(selectString, parameters, this.Transaction);
        }

        /// <summary>
        /// 查询列表
        /// </summary>
        public virtual IEnumerable<TEntity> GetList<TEntity>(Expr expr, OrderByExpr orderBy)
            where TEntity : class
        {
            DynamicParameters parameters = new DynamicParameters();
            string selectString = string.Format(MsSqlConfig.SELECT_ORDER_BY_FORMAT,
                this.TableName, expr.ToWhere(parameters), orderBy.ToOrderBy());
            return this.Connection.Query<TEntity>(selectString, parameters, this.Transaction);
        }

        /// <summary>
        /// 查询列表
        /// </summary>
        public virtual IEnumerable<TEntity> GetList<TEntity>(Expr expr, OrderByExpr orderBy, int startPage, int endPage)
            where TEntity : class
        {
            DynamicParameters parameters = new DynamicParameters();
            string selectString = string.Format(MsSqlConfig.SELECT_PAGE_FORMAT,
                this.TableName, expr.ToWhere(parameters), orderBy.ToOrderBy(), startPage, endPage);
            return this.Connection.Query<TEntity>(selectString, parameters, this.Transaction);
        }
        #endregion

    }
}