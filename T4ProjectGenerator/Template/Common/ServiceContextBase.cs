// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 12.0.0.0
//  
//     对此文件的更改可能会导致不正确的行为。此外，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace T4ProjectGenerator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\zy\T4\T4ProjectGenerator\T4ProjectGenerator\Template\Common\ServiceContextBase.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class ServiceContextBase : Base
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ");
            
            #line 9 "E:\zy\T4\T4ProjectGenerator\T4ProjectGenerator\Template\Common\ServiceContextBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Config.CommonNamespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public abstract class ServiceContextBase<TManager>\r\n        where TManag" +
                    "er : MsSqlAccessBase\r\n    {\r\n        protected abstract TManager Manager { get; " +
                    "set; }\r\n\r\n        public ServiceContextBase() { }\r\n\r\n        #region 基础方法\r\n     " +
                    "   /// <summary>\r\n        /// 添加或批量添加\r\n        /// </summary>\r\n        public in" +
                    "t Add<TEntity>(params TEntity[] entities)\r\n            where TEntity : class\r\n  " +
                    "      {\r\n            return this.Manager.Add<TEntity>(entities);\r\n        }\r\n\r\n " +
                    "       /// <summary>\r\n        /// 单个添加\r\n        /// </summary>\r\n        public T" +
                    "Identity Add<TEntity, TIdentity>(TEntity entity)\r\n            where TEntity : cl" +
                    "ass\r\n            where TIdentity : IConvertible\r\n        {\r\n            return t" +
                    "his.Manager.Add<TEntity, TIdentity>(entity);\r\n        }\r\n\r\n        /// <summary>" +
                    "\r\n        /// 修改\r\n        /// </summary>\r\n        public int Update<TEntity>(TEn" +
                    "tity entity)\r\n            where TEntity : class\r\n        {\r\n            return t" +
                    "his.Manager.Update<TEntity>(entity);\r\n        }\r\n\r\n        /// <summary>\r\n      " +
                    "  /// 删除\r\n        /// </summary>\r\n        public int Delete(Expr expr)\r\n        " +
                    "{\r\n            return this.Manager.Delete(expr);\r\n        }\r\n\r\n        /// <summ" +
                    "ary>\r\n        /// 判断存在\r\n        /// </summary>\r\n        public bool IsExist(Expr" +
                    " expr)\r\n        {\r\n            return this.Manager.IsExist(expr);\r\n        }\r\n\r\n" +
                    "        /// <summary>\r\n        /// 总数量\r\n        /// </summary>\r\n        public i" +
                    "nt GetCount()\r\n        {\r\n            return this.Manager.GetCount();\r\n        }" +
                    "\r\n\r\n        /// <summary>\r\n        /// 查询条件数量\r\n        /// </summary>\r\n        p" +
                    "ublic int GetCount(Expr expr)\r\n        {\r\n            return this.Manager.GetCou" +
                    "nt(expr);\r\n        }\r\n\r\n        /// <summary>\r\n        /// 查询实体\r\n        /// </s" +
                    "ummary>\r\n        public TEntity Get<TEntity>(Expr expr)\r\n            where TEnti" +
                    "ty : class\r\n        {\r\n            return this.Manager.Get<TEntity>(expr);\r\n    " +
                    "    }\r\n\r\n        /// <summary>\r\n        /// 查询实体\r\n        /// </summary>\r\n      " +
                    "  public TEntity Get<TEntity>(Expr expr, OrderByExpr orderBy)\r\n            where" +
                    " TEntity : class\r\n        {\r\n            return this.Manager.Get<TEntity>(expr, " +
                    "orderBy);\r\n        }\r\n\r\n        /// <summary>\r\n        /// 查询列表\r\n        /// </s" +
                    "ummary>\r\n        public IEnumerable<TEntity> GetList<TEntity>()\r\n            whe" +
                    "re TEntity : class\r\n        {\r\n            return this.Manager.GetList<TEntity>(" +
                    ");\r\n        }\r\n\r\n        /// <summary>\r\n        /// 查询列表\r\n        /// </summary>" +
                    "\r\n        public IEnumerable<TEntity> GetList<TEntity>(Expr expr)\r\n            w" +
                    "here TEntity : class\r\n        {\r\n            return this.Manager.GetList<TEntity" +
                    ">(expr);\r\n        }\r\n\r\n        /// <summary>\r\n        /// 查询列表\r\n        /// </su" +
                    "mmary>\r\n        public IEnumerable<TEntity> GetList<TEntity>(Expr expr, int top)" +
                    "\r\n            where TEntity : class\r\n        {\r\n            return this.Manager." +
                    "GetList<TEntity>(expr, top);\r\n        }\r\n\r\n        /// <summary>\r\n        /// 查询" +
                    "列表\r\n        /// </summary>\r\n        public IEnumerable<TEntity> GetList<TEntity>" +
                    "(Expr expr, int top, OrderByExpr orderBy)\r\n            where TEntity : class\r\n  " +
                    "      {\r\n            return this.Manager.GetList<TEntity>(expr, top, orderBy);\r\n" +
                    "        }\r\n\r\n        /// <summary>\r\n        /// 查询列表\r\n        /// </summary>\r\n  " +
                    "      public IEnumerable<TEntity> GetList<TEntity>(Expr expr, OrderByExpr orderB" +
                    "y)\r\n            where TEntity : class\r\n        {\r\n            return this.Manage" +
                    "r.GetList<TEntity>(expr, orderBy);\r\n        }\r\n\r\n        /// <summary>\r\n        " +
                    "/// 查询列表\r\n        /// </summary>\r\n        public IEnumerable<TEntity> GetList<TE" +
                    "ntity>(Expr expr, OrderByExpr orderBy, int startPage, int endPage)\r\n            " +
                    "where TEntity : class\r\n        {\r\n            return this.Manager.GetList<TEntit" +
                    "y>(expr, orderBy, startPage, endPage);\r\n        }\r\n        #endregion\r\n\r\n    }\r\n" +
                    "}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
