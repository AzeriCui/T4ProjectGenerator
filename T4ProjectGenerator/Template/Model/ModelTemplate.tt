<#@ template language="C#" inherits="Base" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated>
// 自动生成请勿修改
// </auto-generated>
using System;
using <#=        Config.CommonNamespace #>;

namespace <#=        Config.ModelNamespace #>
{
    /// <summary>
    /// <#=        _ColumnList.FirstOrDefault().TableDescription #>
    /// </summary>
    public partial class <#=        _TableName #><#=        Config.ModelClassSuffix #>
    {
<#
    foreach(DataSchema item in _ColumnList)
    {

#>
        /// <summary>
        /// <#=            item.Description #>
        /// </summary>
        public virtual <#=            item.CSharpDataType #> <#=            item.ColumnName #> { get; set; }
<#
    }

 #>
    }

    public class <#=        _TableName #>Config : ISqlConfig
    {
        #region SQL语句
        private Lazy<string> _TableName = new Lazy<string>(() =>
        {
            return "<#=        _TableName #>";
        });

        private Lazy<string> _Insert = new Lazy<string>(() =>
        {
            return "insert into <#=        _TableName #> (<#=        DataManager.GetInsertField(_ColumnList) #>) values (<#=        DataManager.GetInsertValue(_ColumnList) #>) ";
        });

        private Lazy<string> _InsertIdentity = new Lazy<string>(() =>
        {
            return "insert into <#=        _TableName #> (<#=        DataManager.GetInsertField(_ColumnList) #>) values (<#=        DataManager.GetInsertValue(_ColumnList) #>); select scope_identity() ";
        });

        private Lazy<string> _Update = new Lazy<string>(() =>
        {
<#
    if(DataManager.IsUpdate(_ColumnList))
    {
 #>
            return "update <#=        _TableName #> set <#=            DataManager.GetUpdateField(_ColumnList, false) #> where <#=            DataManager.GetUpdateField(_ColumnList, true) #> ";
<#
    } else{
#>
                throw new System.NotImplementedException();
<#
    }
#>
        });

        private Lazy<string> _Delete = new Lazy<string>(() =>
        {
            return "delete from <#=        _TableName #> where {0} ";
        });

        private Lazy<string> _SelectAllCount = new Lazy<string>(() =>
        {
            return "select count(*) from <#=        _TableName #> ";
        });

        private Lazy<string> _SelectCount = new Lazy<string>(() =>
        {
            return "select count(*) from <#=        _TableName #> where {0} ";
        });

        private Lazy<string> _SelectTop = new Lazy<string>(() =>
        {
            return "select top({0}) * from <#=        _TableName #> where {1} ";
        });

        private Lazy<string> _SelectTopOrder = new Lazy<string>(() =>
        {
            return "select top({0}) * from <#=        _TableName #> where {1} order by {2} ";
        });

        private Lazy<string> _SelectAll = new Lazy<string>(() =>
        {
            return "select * from <#=        _TableName #> ";
        });

        private Lazy<string> _SelectWhere = new Lazy<string>(() =>
        {
            return "select * from <#=        _TableName #> where {0} ";
        });

        private Lazy<string> _SelectWhereOrder = new Lazy<string>(() =>
        {
            return "select * from <#=        _TableName #> where {0} order by {1} ";
        });

        private Lazy<string> _SelectPage = new Lazy<string>(() =>
        {
            return "select * from (select row_number() over (order by {1}) as RowIndex, * from <#=        _TableName #> where {0}) as t where t.RowIndex between {2} and {3} ";
        });
        #endregion

        public string TableName
        {
            get { return _TableName.Value; }
        }

        public string Insert
        {
            get { return _Insert.Value; }
        }

        public string InsertIdentity
        {
            get { return _InsertIdentity.Value; }
        }

        public string Update
        {
            get { return _Update.Value; }
        }

        public string Delete
        {
            get { return _Delete.Value; }
        }

        public string SelectAllCount
        {
            get { return _SelectAllCount.Value; }
        }

        public string SelectCount
        {
            get { return _SelectCount.Value; }
        }

        public string SelectTop
        {
            get { return _SelectTop.Value; }
        }

        public string SelectTopOrder
        {
            get { return _SelectTopOrder.Value; }
        }

        public string SelectAll
        {
            get { return _SelectAll.Value; }
        }

        public string SelectWhere
        {
            get { return _SelectWhere.Value; }
        }

        public string SelectWhereOrder
        {
            get { return _SelectWhereOrder.Value; }
        }

        public string SelectPage
        {
            get { return _SelectPage.Value; }
        }
    }
}