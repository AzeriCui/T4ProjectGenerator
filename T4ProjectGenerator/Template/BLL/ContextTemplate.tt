<#@ template language="C#" inherits="Base" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Data;
using System.Data.SqlClient;
using <#=        Config.CommonNamespace #>;

namespace <#=        Config.ContextNamespace #>
{
    public partial class <#=        Config.ContextClassPrefix #>Context : DbProviderFactory
    {
        private Lazy<IDbContextComponent> _Context;

        protected override IDbContextComponent Context
        {
            get { return _Context.Value; }
        }

        public <#=        Config.ContextClassPrefix #>Context()
            : base()
        {
            _Context = new Lazy<IDbContextComponent>(() => new <#=        Config.ContextClassPrefix #>ContextWrapper());
<#
    foreach(DataSchema item in _ColumnList)
    {

#>
            _Client<#=            item.TableName #> = new Lazy<<#=            item.TableName #><#=            Config.ServiceClassSuffix #>>(() => new <#=            item.TableName #><#=            Config.ServiceClassSuffix #>(Context));
<#
    }

 #>
        }

<#
    foreach(DataSchema item in _ColumnList)
    {

#>
        private Lazy<<#=            item.TableName #><#=            Config.ServiceClassSuffix #>> _Client<#=            item.TableName #> = null;
        /// <summary>
        /// <#=            item.TableDescription #>
        /// </summary>
        public <#=            item.TableName #><#=            Config.ServiceClassSuffix #> Client<#=            item.TableName #>
        {
            get { return _Client<#=            item.TableName #>.Value; }
        }

<#
    }

 #>
    }

    internal class <#=        Config.ContextClassPrefix #>ContextWrapper : IDbContextComponent
    {
        public IDbConnection Connection { get; set; }

        public IDbTransaction Transaction { get; set; }

        public <#=        Config.ContextClassPrefix #>ContextWrapper()
        {
            this.Connection = new SqlConnection(ConfigManager.GetValue("<#=        Config.ContextConnectionStringKey #>"));
            if (this.Connection.State != ConnectionState.Open)
            {
                this.Connection.Open();
            }
        }

        public void Dispose()
        {
            if (this.Transaction != null)
            {
                this.Transaction.Dispose();
                this.Transaction = null;
            }
            if (this.Connection != null)
            {
                this.Connection.Close();
                this.Connection.Dispose();
                this.Connection = null;
            }
        }
    }
}